// @baldengineer
// WiFi9600 Modem Front Panel test code
// from livestreams twitch.tv/baldengineer
//
// This code only drives the front panel board. It needs 
// integration into the rest of the modem code to be useful.

#include "2020-11-25-9600-fp-plus-mp3.h"

// bits set to a 1 are active low. 2nd least-sig nibble
// isn't used by the hardware.
// EN TX RX ECgrn   HSred HSgrn ECred DC   X X X X   OH TR AA CD
const uint16_t invert_mask = 0b1110000000001111; 
void update_led(uint16_t led, bool state, bool update) {
	if (state == TURN_ON) 
		led_states = led_states | led;
	else
		led_states = led_states & ~led;

	if (update)
		send_led_states(led_states);
}

// properly masks the pattern to enable panel and XOR
// state variable to handle inverted LEDs
void send_led_states(uint16_t leds) {
	// ensure the panel-enable signal is low
	// which turns on the PFET for VCC
	leds = ((leds ^ invert_mask) & PANEL_EN);

	digitalWrite(latch_595, LOW);
	  shiftOut(data_595, clock_595, LSBFIRST, lowByte(leds));
	  shiftOut(data_595, clock_595, LSBFIRST, highByte(leds));
	digitalWrite(latch_595, HIGH);
}

// alternative to just sending send_led_update() with 0xFFFF or 0x0;
void all_led_state(bool state) {
	for (int x=0; x<11; x++) 
		update_led(front_leds[x], state, false);
}

// test routine for front panel to turn on LEDs, in order
void led_test(int wait) {
	led_states = 0x0;
	for (int x=0; x < 11; x++) {
		update_led(front_leds[x], TURN_ON, true);
		delay(wait);
		update_led(front_leds[x], TURN_OFF, true);
		delay(wait);
	}
}

// serial debug code, originally to send specific hex values to
// the panel controller. probably remove in the final
void handle_serial() {
	byte incoming_char;

	if (Serial.available()) {
		incoming_char = Serial.read();
		if (incoming_char == '1')
			mp3_play_dialout();
		if (incoming_char == '2')
			mp3_play_carrier_detect();
		if (incoming_char == '+')
			toggle_relay();

	}

	/*char incoming_hex[16];

	for (int x=0; x < 16; x++)
		incoming_hex[x] = '\0';

	// from serial monitor 0000 0F03

	if (Serial.available() > 0) {
		// Serial.readBytesUntil(character, buffer, length)
		// get our hex string
		int number_received = Serial.readBytesUntil('\n', incoming_hex, 15);
		led_states = strtol(incoming_hex, NULL, 16);

		Serial.print("Received: '"); Serial.print(incoming_hex);
		Serial.print("' , Setting to: "); Serial.println(led_states);
	}*/

}

// silly (example) routine to simulate data traffic patterns on LEDs
void random_led() {
	unsigned long current_time = millis();
	if(current_time - previous_activity >= activity_interval) {
		previous_activity = current_time;
		long rnd = random(0,101);
		if (rnd % 2 == 0)
			TX_state = !TX_state;

		if (rnd < 50)
			RX_state = !RX_state;

		update_led(TX, TX_state, false);
		update_led(RX, RX_state, true);
	}
}

// setups LEDs to simulate modem connection. 
void simulate_modem_connection() {
	delay(2500);
	toggle_relay();
	mp3_play_dialout();
	update_led(OH, TURN_ON, true);
	delay(100);
	update_led(TR, TURN_ON, true);
	delay(400);
	update_led(CD, TURN_ON, true);
	delay(250);
	update_led(HSgrn, TURN_ON, true);
	delay(100);
	update_led(ECgrn, TURN_ON, true);
	delay(100);
	update_led(DC, TURN_ON, true);	
	delay(250);
	yield();
	delay(250);
	yield();
	delay(250);
	yield();
	delay(250);
	mp3_play_carrier_detect();
}

// setup 595 shift registers (there are two), and turn LEDs
// off as soon as possible.
void init_shift_register() {
	pinMode(latch_595, OUTPUT);	digitalWrite(latch_595, HIGH);
	pinMode(clock_595, OUTPUT);	digitalWrite(clock_595, LOW);
	pinMode(data_595,  OUTPUT);	digitalWrite(data_595, LOW);
	send_led_states(0x0000);
	delay(500);	
}


// baud rates
const uint16_t baud_2400_us = 416;
const uint16_t baud_9600_us = 104;
unsigned long previous_baud = 0;

#define receive_pattern_count 2048
unsigned long receive_index = 0;
unsigned long receive_data_pattern[receive_pattern_count];

void create_random_data_pattern() {
	int ones = 0;
	int zeros = 0;
	int huh = 0;

	for (int x=0; x<receive_pattern_count; x = x + 128) {
		unsigned long rnd = random(0,2);
		for (int y=0; y<128; y++) {
			receive_data_pattern[x+y] = rnd;
			if (rnd==0)
				zeros = zeros + 1;
			else if (rnd==1)
				ones = ones + 1;
				else 
				 huh = huh + 1;
		}
	}

/*	for (int x=0; x<receive_pattern_count; x++)
		Serial.print(receive_data_pattern[x]);

	Serial.println();

	Serial.println("\nRandom Bits:");
	Serial.print("Zeros: "); Serial.println(zeros);
	Serial.print(" Ones: "); Serial.println(ones);
	Serial.print("  Huh: "); Serial.println(huh); */
}

// to simulate more realistic traffic patterns
// testing for when this code moves to the real modem firmware
void simulate_traffic() {
	unsigned long current_micros = micros();
	if (current_micros - previous_baud >= baud_9600_us) {
		previous_baud = current_micros;

		// create receive traffic
		if (receive_data_pattern[receive_index]) {
			previous_RX_act = millis();
			update_led(RX, TURN_ON, true);
		}

		receive_index++;
		if (receive_index >= receive_pattern_count) {
			if (random(0,2)==1) {
				previous_TX_act = millis();			
				update_led(TX, TURN_ON, true);
			}
			receive_index = 0;
			create_random_data_pattern();
		}
	}
}

void activity_decay() {
/*unsigned long previous_TX_act = 0;
unsigned long previous_RX_act = 0;
unsigned long activity_interval = 50; // may need separate intervals for RX and TX*/
	unsigned long current_millis = millis();
	if (current_millis - previous_RX_act >= activity_interval) {
	//	previous_RX_act = current_micros;
		update_led(RX, TURN_OFF, true);
	}

	current_millis = millis();
	if (current_millis - previous_TX_act >= activity_interval) {
	//	previous_RX_act = current_micros;
		update_led(TX, TURN_OFF, true);
	}	
}

void mp3_play_dialout() { 
	 mp3.playTrack(1);
}

void mp3_play_carrier_detect() {
	 mp3.playTrack(3);
}

void init_mp3() {
  //Check to see if Qwiic MP3 is present on the bus
  if (mp3.begin() == false)
  {
    Serial.println("Qwiic MP3 failed to respond. Please check wiring and possibly the I2C address. Freezing...");
    while (1);
  }
  mp3.setVolume(speaker_volume);

}

void toggle_relay() {
  if (relay_state)
    relay_state = false;
  else
    relay_state = true;

	Serial.print("Relay: "); Serial.println(relay_state);

  digitalWrite(relay_pin, relay_state);
}

void setup() {
	init_shift_register();
	// hi chat you look nice today

	pinMode(ans_pushbutton, INPUT_PULLUP);
	pinMode(relay_pin, OUTPUT);
	toggle_relay();

	Serial.begin(57600);
	Serial.println("\n\nWiFi9600 Front Panel Test");
	Serial.print("---");
	// simple test pattern and then turn them back off.
	led_test(100);
	delay(500);
	send_led_states(0x0000);

	Wire.begin(i2c_SDA, i2c_SCL);
	init_mp3();

	create_random_data_pattern();

	simulate_modem_connection();
}

//unsigned long previous_pb =0;
unsigned long pb_interval = 1000;
uint8_t previous_pb = 0x0;

void loop() { 
	handle_serial();
//	random_led();
	simulate_traffic();
	activity_decay();

	uint8_t current_pb = digitalRead(ans_pushbutton);
	if (current_pb != previous_pb) {
		toggle_relay();
/*		if (current_pb == PRESSED) {
			//Serial.println("Button Push!");
			send_led_states(0x0000);
			delay(250);
			led_test(100);
			delay(250);
			simulate_modem_connection();
			delay(500);
		}*/	
		previous_pb = current_pb;
	} 
//	Serial.println(digitalRead(5));


}	